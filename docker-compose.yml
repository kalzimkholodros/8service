services:
  # API Gateway
  apigateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "5182:5182"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5182
    depends_on:
      - authservice
      - productservice
      - basketservice
      - orderservice
      - paymentservice
      - reviewservice
      - notificationservice
      - inventoryservice
    networks:
      - ecommerce-network

  # Auth Service
  authservice:
    build:
      context: ./AuthService
      dockerfile: Dockerfile
    ports:
      - "5206:5206"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=AuthDb;Username=postgres;Password=postgres
      - Jwt__Key=super-secret-key-from-user-service-must-be-very-long-and-secure-123!@#
      - Jwt__Issuer=AuthService
      - Jwt__Audience=AuthServiceClients
      - Jwt__ExpiryInHours=1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Product Service
  productservice:
    build:
      context: ./ProductService
      dockerfile: Dockerfile
    ports:
      - "5142:5142"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=ProductDb;Username=postgres;Password=postgres
      - Jwt__Authority=https://authservice:5206
      - Jwt__Audience=product-service
    depends_on:
      - postgres
      - authservice
    networks:
      - ecommerce-network

  # Basket Service
  basketservice:
    build:
      context: ./BasketService
      dockerfile: Dockerfile
    ports:
      - "5256:5256"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=BasketDb;Username=postgres;Password=postgres
      - ConnectionStrings__Redis=redis:6379
      - Jwt__Authority=https://authservice:5206
      - Jwt__Audience=basket-service
      - ProductService__BaseUrl=https://productservice:5142
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      authservice:
        condition: service_started
      productservice:
        condition: service_started
    networks:
      - ecommerce-network

  # Order Service
  orderservice:
    build:
      context: ./OrderService
      dockerfile: Dockerfile
    ports:
      - "5296:5296"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=OrderDb;Username=postgres;Password=postgres
      - Jwt__Key=your-secret-key-here-must-be-at-least-32-characters
      - Jwt__Issuer=your-issuer
      - Jwt__Audience=your-audience
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - RabbitMQ__QueueName=checkout_queue
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Payment Service
  paymentservice:
    build:
      context: ./PaymentService
      dockerfile: Dockerfile
    ports:
      - "5208:5208"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=PaymentDb;Username=postgres;Password=postgres
      - Jwt__Key=your-secret-key-here-must-be-at-least-32-characters
      - Jwt__Issuer=your-issuer
      - Jwt__Audience=your-audience
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - RabbitMQ__QueueName=payment_status_queue
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Review Service
  reviewservice:
    build:
      context: ./ReviewService
      dockerfile: Dockerfile
    ports:
      - "5174:5174"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=ReviewDb;Username=postgres;Password=postgres
      - Jwt__Key=your-secret-key-here-must-be-at-least-32-characters
      - Jwt__Issuer=your-issuer
      - Jwt__Audience=your-audience
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - RabbitMQ__QueueName=review_queue
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Notification Service
  notificationservice:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    ports:
      - "5072:5072"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=NotificationDb;Username=postgres;Password=postgres
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - RabbitMQ__QueueName=notification_queue
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Inventory Service
  inventoryservice:
    build:
      context: ./InventoryService
      dockerfile: Dockerfile
    ports:
      - "5207:5207"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=InventoryDb;Username=postgres;Password=postgres
      - Jwt__Key=your-secret-key-here-must-be-at-least-32-characters
      - Jwt__Issuer=your-issuer
      - Jwt__Audience=your-audience
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
      - RabbitMQ__QueueName=inventory_queue
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network

  # PostgreSQL
  postgres:
    image: postgres:latest
    container_name: 8service-postgres-1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: AuthDb,ProductDb,OrderDb,PaymentDb,ReviewDb,InventoryDb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # Redis
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ecommerce-network

volumes:
  postgres_data:

networks:
  ecommerce-network:
    driver: bridge 